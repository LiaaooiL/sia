<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- Bean for the Entity Manager (via entityManagerFactory managed by the container) -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- Data origin -->
        <property name="dataSource" ref="dataSource"/>
        <!-- JPA implementation -->
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
        <!-- Hibernate specific properties -->
        <property name="jpaProperties">
            <props>
                <!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop>-->
                <!-- Workarround to get the IntelliJ Persistence Tool window working -->
                <prop key="hibernate.connection.url">jdbc:postgresql://localhost:5432/sia_dev</prop>
            </props>
        </property>
        <!-- Package where search the entities (@Entities). It allows to remove persistence.xml-->
        <property name="packagesToScan" value="org.sysreg.sia.model"/>
    </bean>

    <!-- Data Souce: PostgreSQL -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <!-- RaspberryPi -->
        <!-- <property name="url" value="jdbc:postgresql://10.0.1.19:5432/sia_pru" />
        <property name="username" value="sia_app" />
        <property name="password" value="agricultura.1" />
        -->
        <!-- Localhost -->
        <property name="url" value="jdbc:postgresql://localhost:5432/sia_dev"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="20"/>
    </bean>

    <!-- JPA implementation: Hibernate -->
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="database" value="POSTGRESQL"/>
        <property name="showSql" value="true"/>
        <!-- Schema update enabled for development, change to "false" in production (avoid DB update) -->
        <property name="generateDdl" value="true"/>
        <property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect"/>
    </bean>

    <!-- Transactions managed by JPA -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- Inject EntityManager with @PersistentConten -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- Manage SQL Exceptions -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <context:annotation-config/>

    <tx:annotation-driven/>

    <context:component-scan base-package="org.sysreg.sia.daos"/>

    <!-- Services -->

    <alias alias="fieldService" name="defaultFieldService" />
    <bean id="defaultFieldService" class="org.sysreg.sia.services.impl.DefaultFieldService" scope="singleton">
        <property name="userDAO" ref="defaultUserDAO" />
        <property name="fieldDAO" ref="defaultFieldDAO" />
        <property name="enclosureDAO" ref="defaultEnclosureDAO" />
        <property name="serverDAO" ref="defaultServerDAO" />
    </bean>

    <!-- Facades -->
    <alias alias="fieldFacade" name="defaultFieldFacade" />
    <bean id="defaultFieldFacade" class="org.sysreg.sia.facades.impl.DefaultFieldFacade" scope="singleton">
        <property name="fieldService" ref="fieldService" />
    </bean>

    <!-- Bean Web services -->
    <bean id="springWSClient" class="org.springframework.web.client.RestTemplate" scope="singleton"/>

    <alias alias="boardWSClient" name="alRegBoardWSClient" />
    <bean id="alRegBoardWSClient" class="org.sysreg.sia.ws.client.impl.AlRegBoardWSClient" scope="request">
        <property name="springWSClient" ref="springWSClient"/>
    </bean>

    <alias alias="boardService" name="defaultBoardService" />
    <bean id="defaultBoardService" class="org.sysreg.sia.ws.service.impl.DefaultBoardService" scope="request">
        <property name="boardWSClient" ref="boardWSClient" />
    </bean>

    <alias alias="serverFacade" name="alRegServerFacade"  />
    <bean id="alRegServerFacade" class="org.sysreg.sia.facades.impl.AlRegServerFacade" scope="request">
        <constructor-arg ref="boardService" />
    </bean>

    <!--[Problem: singleton references prototype]  As we need the facade to be prototype and with run time arguments,
we create the instances using ObjectFactoryCreatingFactoryBean instead of contextAware implementation-->
    <!-- Factory provided by spring -->
    <bean id="serverFacadeFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName">
            <idref bean="serverFacade" />
        </property>
    </bean>


</beans>
